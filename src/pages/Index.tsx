import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Separator } from '@/components/ui/separator';
import { Shield, Sparkles } from 'lucide-react';
import { toast } from '@/hooks/use-toast';
import Layout from '@/components/Layout';
import FileUpload from '@/components/FileUpload';
import TextAnalyzer from '@/components/TextAnalyzer';
import ResultCard from '@/components/ResultCard';
import LoadingSpinner from '@/components/LoadingSpinner';
import HistorySection from '@/components/HistorySection';
import { useHistory } from '@/hooks/useHistory';
import { detectContent } from '@/services/api';
import type { AnalysisResult, ContentType } from '@/types';

const Index = () => {
  const [currentResult, setCurrentResult] = useState<AnalysisResult | null>(null);
  const [isLoading, setIsLoading] = useState(false);
  const { history, addToHistory, clearHistory } = useHistory();

  const handleFileAnalysis = async (file: File) => {
    setIsLoading(true);
    setCurrentResult(null);

    try {
      const formData = new FormData();
      formData.append('file', file);

      const response = await detectContent(formData);
      
      const result: AnalysisResult = {
        id: Date.now().toString(),
        type: file.type.startsWith('video/') ? 'video' : 'image',
        result: response.result,
        confidence: response.confidence,
        timestamp: new Date(),
        filename: file.name,
      };

      setCurrentResult(result);
      addToHistory(result);
      
      toast({
        title: "Analysis Complete",
        description: `File analyzed: ${response.result} (${response.confidence}% confidence)`,
      });
    } catch (error) {
      toast({
        title: "Analysis Failed",
        description: "Could not analyze the file. Please try again.",
        variant: "destructive",
      });
    } finally {
      setIsLoading(false);
    }
  };

  const handleTextAnalysis = async (text: string) => {
    setIsLoading(true);
    setCurrentResult(null);

    try {
      const formData = new FormData();
      formData.append('text', text);

      const response = await detectContent(formData);
      
      const result: AnalysisResult = {
        id: Date.now().toString(),
        type: 'text',
        result: response.result,
        confidence: response.confidence,
        timestamp: new Date(),
        textPreview: text.slice(0, 100),
      };

      setCurrentResult(result);
      addToHistory(result);
      
      toast({
        title: "Analysis Complete",
        description: `Text analyzed: ${response.result} (${response.confidence}% confidence)`,
      });
    } catch (error) {
      toast({
        title: "Analysis Failed", 
        description: "Could not analyze the text. Please try again.",
        variant: "destructive",
      });
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <Layout>
      <div className="space-y-8">
        {/* Hero Section */}
        <div className="text-center space-y-4 py-8">
          <div className="flex justify-center">
            <div className="p-4 bg-gradient-primary rounded-2xl shadow-custom-xl">
              <Shield size={48} className="text-primary-foreground" />
            </div>
          </div>
          <h1 className="text-4xl font-bold text-foreground">AI Content Detector</h1>
          <p className="text-xl text-muted-foreground max-w-2xl mx-auto">
            Upload images, videos, or paste text to detect if content was generated by AI
          </p>
        </div>

        {/* Analysis Section */}
        <div className="grid lg:grid-cols-2 gap-8">
          {/* File Upload */}
          <Card className="shadow-custom-lg border-border/50">
            <CardHeader>
              <CardTitle className="flex items-center space-x-2">
                <Sparkles className="text-primary" size={20} />
                <span>Media Analysis</span>
              </CardTitle>
            </CardHeader>
            <CardContent>
              <FileUpload 
                onFileSelect={handleFileAnalysis}
                disabled={isLoading}
              />
            </CardContent>
          </Card>

          {/* Text Analysis */}
          <Card className="shadow-custom-lg border-border/50">
            <CardHeader>
              <CardTitle>Text Analysis</CardTitle>
            </CardHeader>
            <CardContent>
              <TextAnalyzer 
                onAnalyze={handleTextAnalysis}
                disabled={isLoading}
              />
            </CardContent>
          </Card>
        </div>

        {/* Loading State */}
        {isLoading && (
          <Card className="shadow-custom-lg border-border/50">
            <CardContent className="p-0">
              <LoadingSpinner />
            </CardContent>
          </Card>
        )}

        {/* Current Result */}
        {currentResult && !isLoading && (
          <div className="space-y-4">
            <h2 className="text-2xl font-semibold text-foreground">Latest Result</h2>
            <ResultCard result={currentResult} />
          </div>
        )}

        {/* History */}
        {history.length > 0 && (
          <>
            <Separator className="my-8" />
            <HistorySection 
              history={history} 
              onClearHistory={clearHistory}
            />
          </>
        )}
      </div>
    </Layout>
  );
};

export default Index;
